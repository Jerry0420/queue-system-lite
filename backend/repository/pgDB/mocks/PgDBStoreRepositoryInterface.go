// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jerry0420/queue-system/backend/domain"
	mock "github.com/stretchr/testify/mock"

	pgDB "github.com/jerry0420/queue-system/backend/repository/pgDB"

	time "time"
)

// PgDBStoreRepositoryInterface is an autogenerated mock type for the PgDBStoreRepositoryInterface type
type PgDBStoreRepositoryInterface struct {
	mock.Mock
}

// CreateStore provides a mock function with given fields: ctx, tx, store
func (_m *PgDBStoreRepositoryInterface) CreateStore(ctx context.Context, tx pgDB.PgDBInterface, store *domain.Store) error {
	ret := _m.Called(ctx, tx, store)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, *domain.Store) error); ok {
		r0 = rf(ctx, tx, store)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllExpiredStoresInSlice provides a mock function with given fields: ctx, tx, expiresTime
func (_m *PgDBStoreRepositoryInterface) GetAllExpiredStoresInSlice(ctx context.Context, tx pgDB.PgDBInterface, expiresTime time.Time) ([][][]string, error) {
	ret := _m.Called(ctx, tx, expiresTime)

	var r0 [][][]string
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, time.Time) [][][]string); ok {
		r0 = rf(ctx, tx, expiresTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgDB.PgDBInterface, time.Time) error); ok {
		r1 = rf(ctx, tx, expiresTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIdsOfExpiredStores provides a mock function with given fields: ctx, tx, expiresTime
func (_m *PgDBStoreRepositoryInterface) GetAllIdsOfExpiredStores(ctx context.Context, tx pgDB.PgDBInterface, expiresTime time.Time) ([]string, error) {
	ret := _m.Called(ctx, tx, expiresTime)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, time.Time) []string); ok {
		r0 = rf(ctx, tx, expiresTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgDB.PgDBInterface, time.Time) error); ok {
		r1 = rf(ctx, tx, expiresTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreByEmail provides a mock function with given fields: ctx, email
func (_m *PgDBStoreRepositoryInterface) GetStoreByEmail(ctx context.Context, email string) (domain.Store, error) {
	ret := _m.Called(ctx, email)

	var r0 domain.Store
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Store); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.Store)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreWithQueuesAndCustomersById provides a mock function with given fields: ctx, storeId
func (_m *PgDBStoreRepositoryInterface) GetStoreWithQueuesAndCustomersById(ctx context.Context, storeId int) (domain.StoreWithQueues, error) {
	ret := _m.Called(ctx, storeId)

	var r0 domain.StoreWithQueues
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.StoreWithQueues); ok {
		r0 = rf(ctx, storeId)
	} else {
		r0 = ret.Get(0).(domain.StoreWithQueues)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, storeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveStoreByID provides a mock function with given fields: ctx, tx, id
func (_m *PgDBStoreRepositoryInterface) RemoveStoreByID(ctx context.Context, tx pgDB.PgDBInterface, id int) error {
	ret := _m.Called(ctx, tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, int) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveStoreByIDs provides a mock function with given fields: ctx, tx, storeIds
func (_m *PgDBStoreRepositoryInterface) RemoveStoreByIDs(ctx context.Context, tx pgDB.PgDBInterface, storeIds []string) error {
	ret := _m.Called(ctx, tx, storeIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, []string) error); ok {
		r0 = rf(ctx, tx, storeIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStore provides a mock function with given fields: ctx, store, fieldName, newFieldValue
func (_m *PgDBStoreRepositoryInterface) UpdateStore(ctx context.Context, store *domain.Store, fieldName string, newFieldValue string) error {
	ret := _m.Called(ctx, store, fieldName, newFieldValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Store, string, string) error); ok {
		r0 = rf(ctx, store, fieldName, newFieldValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
