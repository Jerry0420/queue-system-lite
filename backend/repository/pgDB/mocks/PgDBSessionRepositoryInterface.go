// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jerry0420/queue-system/backend/domain"
	mock "github.com/stretchr/testify/mock"

	pgDB "github.com/jerry0420/queue-system/backend/repository/pgDB"
)

// PgDBSessionRepositoryInterface is an autogenerated mock type for the PgDBSessionRepositoryInterface type
type PgDBSessionRepositoryInterface struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: ctx, store
func (_m *PgDBSessionRepositoryInterface) CreateSession(ctx context.Context, store domain.Store) (domain.StoreSession, error) {
	ret := _m.Called(ctx, store)

	var r0 domain.StoreSession
	if rf, ok := ret.Get(0).(func(context.Context, domain.Store) domain.StoreSession); ok {
		r0 = rf(ctx, store)
	} else {
		r0 = ret.Get(0).(domain.StoreSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Store) error); ok {
		r1 = rf(ctx, store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionById provides a mock function with given fields: ctx, sessionId
func (_m *PgDBSessionRepositoryInterface) GetSessionById(ctx context.Context, sessionId string) (domain.StoreSession, error) {
	ret := _m.Called(ctx, sessionId)

	var r0 domain.StoreSession
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.StoreSession); ok {
		r0 = rf(ctx, sessionId)
	} else {
		r0 = ret.Get(0).(domain.StoreSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSessionState provides a mock function with given fields: ctx, tx, session, oldState, newState
func (_m *PgDBSessionRepositoryInterface) UpdateSessionState(ctx context.Context, tx pgDB.PgDBInterface, session *domain.StoreSession, oldState string, newState string) error {
	ret := _m.Called(ctx, tx, session, oldState, newState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, *domain.StoreSession, string, string) error); ok {
		r0 = rf(ctx, tx, session, oldState, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
