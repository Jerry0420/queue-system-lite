// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jerry0420/queue-system/backend/domain"
	mock "github.com/stretchr/testify/mock"

	pgDB "github.com/jerry0420/queue-system/backend/repository/pgDB"
)

// PgDBCustomerRepositoryInterface is an autogenerated mock type for the PgDBCustomerRepositoryInterface type
type PgDBCustomerRepositoryInterface struct {
	mock.Mock
}

// CreateCustomers provides a mock function with given fields: ctx, tx, customers
func (_m *PgDBCustomerRepositoryInterface) CreateCustomers(ctx context.Context, tx pgDB.PgDBInterface, customers []domain.Customer) error {
	ret := _m.Called(ctx, tx, customers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, []domain.Customer) error); ok {
		r0 = rf(ctx, tx, customers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomersWithQueuesByStore provides a mock function with given fields: ctx, tx, store
func (_m *PgDBCustomerRepositoryInterface) GetCustomersWithQueuesByStore(ctx context.Context, tx pgDB.PgDBInterface, store *domain.Store) ([][]string, error) {
	ret := _m.Called(ctx, tx, store)

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(context.Context, pgDB.PgDBInterface, *domain.Store) [][]string); ok {
		r0 = rf(ctx, tx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgDB.PgDBInterface, *domain.Store) error); ok {
		r1 = rf(ctx, tx, store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: ctx, oldState, newState, customer
func (_m *PgDBCustomerRepositoryInterface) UpdateCustomer(ctx context.Context, oldState string, newState string, customer *domain.Customer) error {
	ret := _m.Called(ctx, oldState, newState, customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.Customer) error); ok {
		r0 = rf(ctx, oldState, newState, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
